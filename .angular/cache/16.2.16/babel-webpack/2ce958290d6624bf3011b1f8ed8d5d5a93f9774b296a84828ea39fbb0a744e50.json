{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let HomeComponent = class HomeComponent {\n  constructor(router) {\n    this.router = router;\n    this.extraFeatures = [{\n      name: 'Certificate',\n      selected: false\n    }, {\n      name: '1-on-1 Mentoring',\n      selected: false\n    }, {\n      name: 'Downloadable Notes',\n      selected: false\n    }];\n    this.course = {\n      id: 1,\n      name: 'Angular Basics',\n      description: 'Learn Angular with hands-on practice.',\n      price: 4999\n    };\n    this.showForm = false;\n    this.enrollData = {\n      name: '',\n      email: ''\n    };\n  }\n  handleEnrollClick() {\n    const isLoggedIn = localStorage.getItem('isLoggedIn');\n    const role = localStorage.getItem('role');\n    if (isLoggedIn !== 'true' || role !== 'user') {\n      alert('ðŸ”’ Please log in first to enroll.');\n      this.router.navigate(['/login'], {\n        queryParams: {\n          returnUrl: '/'\n        }\n      }); // Go back to home\n      return;\n    }\n    // If already logged in, show form\n    this.showForm = true;\n  }\n  submitEnrollment() {\n    //     const enrolledCourses = JSON.parse(localStorage.getItem('enrolledCourses') || '[]');\n    //     // Check if already enrolled\n    //     const already = enrolledCourses.find((c: any) => c.id === this.course.id);\n    //     if (already) {\n    //       alert('âœ… You are already enrolled.');\n    //       return;\n    //     }\n    //     enrolledCourses.push({\n    //       ...this.course,\n    //       name: this.enrollData.name,\n    //       email: this.enrollData.email,\n    //       status: 'Active',\n    //       progress: 0\n    //     });\n    //     localStorage.setItem('enrolledCourses', JSON.stringify(enrolledCourses));\n    //     alert('ðŸŽ‰ Enrollment successful!');\n    //     this.showForm = false;\n    //     this.enrollData = { name: '', email: '' };\n    //   }\n    // }\n    const selectedFeatures = this.extraFeatures.filter(f => f.selected).map(f => f.name);\n    const enrollment = {\n      ...this.course,\n      ...this.enrollData,\n      features: selectedFeatures,\n      status: 'Active',\n      progress: 0\n    };\n    // Save to localStorage (or send to backend)\n    const enrolledCourses = JSON.parse(localStorage.getItem('enrolledCourses') || '[]');\n    enrolledCourses.push(enrollment);\n    localStorage.setItem('enrolledCourses', JSON.stringify(enrolledCourses));\n    alert(`ðŸŽ‰ Enrolled in ${this.course.name} successfully!`);\n    this.enrollData = {\n      name: '',\n      email: ''\n    };\n    this.extraFeatures.forEach(f => f.selected = false);\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})], HomeComponent);","map":{"version":3,"names":["Component","HomeComponent","constructor","router","extraFeatures","name","selected","course","id","description","price","showForm","enrollData","email","handleEnrollClick","isLoggedIn","localStorage","getItem","role","alert","navigate","queryParams","returnUrl","submitEnrollment","selectedFeatures","filter","f","map","enrollment","features","status","progress","enrolledCourses","JSON","parse","push","setItem","stringify","forEach","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\rocks\\OneDrive\\Desktop\\Angular\\AngularForm\\src\\app\\Components\\home\\home.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n\n  extraFeatures = [\n    { name: 'Certificate', selected: false },\n    { name: '1-on-1 Mentoring', selected: false },\n    { name: 'Downloadable Notes', selected: false }\n  ];\n\n  course = {\n    id: 1,\n    name: 'Angular Basics',\n    description: 'Learn Angular with hands-on practice.',\n    price: 4999\n  };\n\n  showForm = false;\n\n  enrollData = {\n    name: '',\n    email: ''\n  };\n\n  constructor(private router: Router) { }\n\n  handleEnrollClick() {\n    const isLoggedIn = localStorage.getItem('isLoggedIn');\n    const role = localStorage.getItem('role');\n\n    if (isLoggedIn !== 'true' || role !== 'user') {\n      alert('ðŸ”’ Please log in first to enroll.');\n      this.router.navigate(['/login'], { queryParams: { returnUrl: '/' } }); // Go back to home\n      return;\n    }\n\n    // If already logged in, show form\n    this.showForm = true;\n  }\n\n  submitEnrollment() {\n    //     const enrolledCourses = JSON.parse(localStorage.getItem('enrolledCourses') || '[]');\n\n    //     // Check if already enrolled\n    //     const already = enrolledCourses.find((c: any) => c.id === this.course.id);\n    //     if (already) {\n    //       alert('âœ… You are already enrolled.');\n    //       return;\n    //     }\n\n    //     enrolledCourses.push({\n    //       ...this.course,\n    //       name: this.enrollData.name,\n    //       email: this.enrollData.email,\n    //       status: 'Active',\n    //       progress: 0\n    //     });\n\n    //     localStorage.setItem('enrolledCourses', JSON.stringify(enrolledCourses));\n    //     alert('ðŸŽ‰ Enrollment successful!');\n    //     this.showForm = false;\n    //     this.enrollData = { name: '', email: '' };\n    //   }\n    // }\n\n    const selectedFeatures = this.extraFeatures\n      .filter(f => f.selected)\n      .map(f => f.name);\n\n    const enrollment = {\n      ...this.course,\n      ...this.enrollData,\n      features: selectedFeatures,\n      status: 'Active',\n      progress: 0\n    };\n\n    // Save to localStorage (or send to backend)\n    const enrolledCourses = JSON.parse(localStorage.getItem('enrolledCourses') || '[]');\n    enrolledCourses.push(enrollment);\n    localStorage.setItem('enrolledCourses', JSON.stringify(enrolledCourses));\n\n    alert(`ðŸŽ‰ Enrolled in ${this.course.name} successfully!`);\n    this.enrollData = { name: '', email: '' };\n    this.extraFeatures.forEach(f => f.selected = false);\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQlC,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAsBxBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IApB1B,KAAAC,aAAa,GAAG,CACd;MAAEC,IAAI,EAAE,aAAa;MAAEC,QAAQ,EAAE;IAAK,CAAE,EACxC;MAAED,IAAI,EAAE,kBAAkB;MAAEC,QAAQ,EAAE;IAAK,CAAE,EAC7C;MAAED,IAAI,EAAE,oBAAoB;MAAEC,QAAQ,EAAE;IAAK,CAAE,CAChD;IAED,KAAAC,MAAM,GAAG;MACPC,EAAE,EAAE,CAAC;MACLH,IAAI,EAAE,gBAAgB;MACtBI,WAAW,EAAE,uCAAuC;MACpDC,KAAK,EAAE;KACR;IAED,KAAAC,QAAQ,GAAG,KAAK;IAEhB,KAAAC,UAAU,GAAG;MACXP,IAAI,EAAE,EAAE;MACRQ,KAAK,EAAE;KACR;EAEqC;EAEtCC,iBAAiBA,CAAA;IACf,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACrD,MAAMC,IAAI,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAEzC,IAAIF,UAAU,KAAK,MAAM,IAAIG,IAAI,KAAK,MAAM,EAAE;MAC5CC,KAAK,CAAC,mCAAmC,CAAC;MAC1C,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;QAAEC,WAAW,EAAE;UAAEC,SAAS,EAAE;QAAG;MAAE,CAAE,CAAC,CAAC,CAAC;MACvE;;IAGF;IACA,IAAI,CAACX,QAAQ,GAAG,IAAI;EACtB;EAEAY,gBAAgBA,CAAA;IACd;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA,MAAMC,gBAAgB,GAAG,IAAI,CAACpB,aAAa,CACxCqB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACpB,QAAQ,CAAC,CACvBqB,GAAG,CAACD,CAAC,IAAIA,CAAC,CAACrB,IAAI,CAAC;IAEnB,MAAMuB,UAAU,GAAG;MACjB,GAAG,IAAI,CAACrB,MAAM;MACd,GAAG,IAAI,CAACK,UAAU;MAClBiB,QAAQ,EAAEL,gBAAgB;MAC1BM,MAAM,EAAE,QAAQ;MAChBC,QAAQ,EAAE;KACX;IAED;IACA,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAAClB,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC;IACnFe,eAAe,CAACG,IAAI,CAACP,UAAU,CAAC;IAChCZ,YAAY,CAACoB,OAAO,CAAC,iBAAiB,EAAEH,IAAI,CAACI,SAAS,CAACL,eAAe,CAAC,CAAC;IAExEb,KAAK,CAAC,kBAAkB,IAAI,CAACZ,MAAM,CAACF,IAAI,gBAAgB,CAAC;IACzD,IAAI,CAACO,UAAU,GAAG;MAAEP,IAAI,EAAE,EAAE;MAAEQ,KAAK,EAAE;IAAE,CAAE;IACzC,IAAI,CAACT,aAAa,CAACkC,OAAO,CAACZ,CAAC,IAAIA,CAAC,CAACpB,QAAQ,GAAG,KAAK,CAAC;EACrD;CACD;AApFYL,aAAa,GAAAsC,UAAA,EALzBvC,SAAS,CAAC;EACTwC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACWzC,aAAa,CAoFzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}