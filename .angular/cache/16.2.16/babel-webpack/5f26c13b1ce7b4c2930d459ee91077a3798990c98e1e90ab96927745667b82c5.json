{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ExploreCoursesComponent = class ExploreCoursesComponent {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.courses = [];\n    this.selectedCourse = null;\n    this.showModal = false;\n    this.student = {\n      name: '',\n      email: ''\n    };\n    this.apiUrl = 'http://localhost:3000/users';\n  }\n  ngOnInit() {\n    const storedCourses = localStorage.getItem('courses');\n    this.courses = storedCourses ? JSON.parse(storedCourses) : [];\n  }\n  enroll(course) {\n    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser') || '{}');\n    if (!loggedInUser.email) {\n      alert('⚠️ Please login to enroll.');\n      this.router.navigate(['/login']);\n      return;\n    }\n    this.selectedCourse = course;\n    this.student = {\n      name: '',\n      email: ''\n    }; // Ask again for name and email\n    this.showModal = true;\n  }\n  confirmEnrollment() {\n    const {\n      name,\n      email\n    } = this.student;\n    if (!name || !email) {\n      alert('❗ Please enter your name and email.');\n      return;\n    }\n    this.http.get(this.apiUrl).subscribe(ser => {\n      const user = users.find(u => u.email === email && u.name === name);\n      if (!user) {\n        alert('❌ User not found. Please check your name and email.');\n        return;\n      }\n      if (!user.enrolledCourses) {\n        user.enrolledCourses = [];\n      }\n      const alreadyEnrolled = user.enrolledCourses.some(c => c.name === this.selectedCourse.name);\n      if (alreadyEnrolled) {\n        alert('⚠️ Already enrolled.');\n        return;\n      }\n      // 2. Push and update via PUT\n      user.enrolledCourses.push(this.selectedCourse);\n      this.http.put(`${this.apiUrl}/${user.id}`, user).subscribe(() => {\n        alert(`✅ Enrolled in \"${this.selectedCourse.name}\"`);\n        this.closeModal();\n      }, err => {\n        alert('❌ Error saving enrollment');\n        console.error(err);\n      });\n    });\n  }\n  closeModal() {\n    this.showModal = false;\n    this.selectedCourse = null;\n    this.student = {\n      name: '',\n      email: ''\n    };\n  }\n};\nExploreCoursesComponent = __decorate([Component({\n  selector: 'app-explore-courses',\n  templateUrl: './explore-courses.component.html',\n  styleUrls: ['./explore-courses.component.css']\n})], ExploreCoursesComponent);","map":{"version":3,"names":["Component","ExploreCoursesComponent","constructor","router","http","courses","selectedCourse","showModal","student","name","email","apiUrl","ngOnInit","storedCourses","localStorage","getItem","JSON","parse","enroll","course","loggedInUser","alert","navigate","confirmEnrollment","get","subscribe","ser","user","users","find","u","enrolledCourses","alreadyEnrolled","some","c","push","put","id","closeModal","err","console","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\rocks\\OneDrive\\Desktop\\Angular\\AngularForm\\src\\app\\Components\\explore-courses\\explore-courses.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { User } from '../Interface/interface';\n\n@Component({\n  selector: 'app-explore-courses',\n  templateUrl: './explore-courses.component.html',\n  styleUrls: ['./explore-courses.component.css']\n})\nexport class ExploreCoursesComponent implements OnInit {\n\n  courses: any[] = [];\n  selectedCourse: any = null;\n  showModal: boolean = false;\n\n  student = {\n    name: '',\n    email: ''\n  };\n\n  apiUrl = 'http://localhost:3000/users';\n\n  constructor(private router: Router, private http: HttpClient) { }\n\n  ngOnInit(): void {\n    const storedCourses = localStorage.getItem('courses');\n    this.courses = storedCourses ? JSON.parse(storedCourses) : [];\n  }\n\n  enroll(course: any): void {\n    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser') || '{}');\n    if (!loggedInUser.email) {\n      alert('⚠️ Please login to enroll.');\n      this.router.navigate(['/login']);\n      return;\n    }\n\n    this.selectedCourse = course;\n    this.student = { name: '', email: '' }; // Ask again for name and email\n    this.showModal = true;\n  }\n\n  confirmEnrollment(): void {\n    const { name, email } = this.student;\n\n    if (!name || !email) {\n      alert('❗ Please enter your name and email.');\n      return;\n    }\n\n    this.http.get<User[]>(this.apiUrl).subscribe(ser => {\n      const user = users.find(u => u.email === email && u.name === name);\n      if (!user) {\n        alert('❌ User not found. Please check your name and email.');\n        return;\n      }\n\n      if (!user.enrolledCourses) {\n        user.enrolledCourses = [];\n      }\n\n      const alreadyEnrolled = user.enrolledCourses.some(\n        (c: any) => c.name === this.selectedCourse.name\n      );\n\n      if (alreadyEnrolled) {\n        alert('⚠️ Already enrolled.');\n        return;\n      }\n\n      // 2. Push and update via PUT\n      user.enrolledCourses.push(this.selectedCourse);\n\n      this.http.put(`${this.apiUrl}/${user.id}`, user).subscribe(() => {\n        alert(`✅ Enrolled in \"${this.selectedCourse.name}\"`);\n        this.closeModal();\n      }, err => {\n        alert('❌ Error saving enrollment');\n        console.error(err);\n      });\n    });\n  }\n\n  closeModal(): void {\n    this.showModal = false;\n    this.selectedCourse = null;\n    this.student = { name: '', email: '' };\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}