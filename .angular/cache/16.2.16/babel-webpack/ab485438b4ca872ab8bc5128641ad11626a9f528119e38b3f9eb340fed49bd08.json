{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/form-service.service\";\nimport * as i2 from \"@angular/forms\";\nexport class RegisterComponent {\n  constructor(userserv, fb) {\n    this.userserv = userserv;\n    this.fb = fb;\n    this.registerForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required],\n      role: ['', Validators.required] // ✅ Add role here\n    });\n  }\n\n  onSubmit() {\n    if (this.registerForm.valid) {\n      const formData = this.registerForm.value;\n      console.log('Selected Role:', formData.role);\n      this.userserv.addUser(formData).subscribe(() => {\n        alert('✅ User registered successfully!');\n        this.registerForm.reset();\n      });\n    }\n  }\n  static {\n    this.ɵfac = function RegisterComponent_Factory(t) {\n      return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormServiceService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegisterComponent,\n      selectors: [[\"app-register\"]],\n      decls: 14,\n      vars: 1,\n      consts: [[3, \"formGroup\", \"ngSubmit\"], [\"type\", \"text\", \"formControlName\", \"name\", \"placeholder\", \"Full Name\", 1, \"form-control\"], [\"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Email\", 1, \"form-control\"], [\"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Password\", 1, \"form-control\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", \"placeholder\", \"Confirm Password\", 1, \"form-control\"], [\"id\", \"role\", \"formControlName\", \"role\", 1, \"form-select\"], [\"value\", \"\", \"disabled\", \"\"], [\"value\", \"Student\"], [\"value\", \"Admin\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-3\"]],\n      template: function RegisterComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_0_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelement(1, \"input\", 1)(2, \"input\", 2)(3, \"input\", 3)(4, \"input\", 4);\n          i0.ɵɵelementStart(5, \"select\", 5)(6, \"option\", 6);\n          i0.ɵɵtext(7, \"Select a role\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"option\", 7);\n          i0.ɵɵtext(9, \"Student\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"option\", 8);\n          i0.ɵɵtext(11, \"Admin\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(12, \"button\", 9);\n          i0.ɵɵtext(13, \"Register\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        }\n      },\n      dependencies: [i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","RegisterComponent","constructor","userserv","fb","registerForm","group","name","required","email","password","minLength","confirmPassword","role","onSubmit","valid","formData","value","console","log","addUser","subscribe","alert","reset","i0","ɵɵdirectiveInject","i1","FormServiceService","i2","FormBuilder","selectors","decls","vars","consts","template","RegisterComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","RegisterComponent_Template_form_ngSubmit_0_listener","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵproperty"],"sources":["C:\\Users\\rocks\\OneDrive\\Desktop\\Angular\\AngularForm\\src\\app\\Components\\register\\register.component.ts","C:\\Users\\rocks\\OneDrive\\Desktop\\Angular\\AngularForm\\src\\app\\Components\\register\\register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormServiceService } from 'src/app/service/form-service.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n\n  registerForm: FormGroup;\n\n  constructor(private userserv: FormServiceService, private fb: FormBuilder) {\n    this.registerForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required],\n      role: ['', Validators.required] // ✅ Add role here\n    });\n  }\n\n  onSubmit() {\n    if (this.registerForm.valid) {\n      const formData = this.registerForm.value;\n      console.log('Selected Role:', formData.role);\n\n      this.userserv.addUser(formData).subscribe(() => {\n        alert('✅ User registered successfully!');\n        this.registerForm.reset();\n      });\n    }\n  }\n}\n","<form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n\n    <!-- Name -->\n    <input type=\"text\" class=\"form-control\" formControlName=\"name\" placeholder=\"Full Name\">\n\n    <!-- Email -->\n    <input type=\"email\" class=\"form-control\" formControlName=\"email\" placeholder=\"Email\">\n\n    <!-- Password -->\n    <input type=\"password\" class=\"form-control\" formControlName=\"password\" placeholder=\"Password\">\n\n    <!-- Confirm Password -->\n    <input type=\"password\" class=\"form-control\" formControlName=\"confirmPassword\" placeholder=\"Confirm Password\">\n\n    <!-- Role -->\n    <select id=\"role\" class=\"form-select\" formControlName=\"role\">\n        <option value=\"\" disabled>Select a role</option>\n        <option value=\"Student\">Student</option>\n        <option value=\"Admin\">Admin</option>\n    </select>\n\n    <button type=\"submit\" class=\"btn btn-primary mt-3\">Register</button>\n\n</form>"],"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAQnE,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,QAA4B,EAAUC,EAAe;IAArD,KAAAD,QAAQ,GAARA,QAAQ;IAA8B,KAAAC,EAAE,GAAFA,EAAE;IAC1D,IAAI,CAACC,YAAY,GAAG,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MAChCC,IAAI,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MAC/BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACT,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACS,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DC,eAAe,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACQ,QAAQ,CAAC;MAC1CK,IAAI,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACQ,QAAQ,CAAC,CAAC;KACjC,CAAC;EACJ;;EAEAM,QAAQA,CAAA;IACN,IAAI,IAAI,CAACT,YAAY,CAACU,KAAK,EAAE;MAC3B,MAAMC,QAAQ,GAAG,IAAI,CAACX,YAAY,CAACY,KAAK;MACxCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,QAAQ,CAACH,IAAI,CAAC;MAE5C,IAAI,CAACV,QAAQ,CAACiB,OAAO,CAACJ,QAAQ,CAAC,CAACK,SAAS,CAAC,MAAK;QAC7CC,KAAK,CAAC,iCAAiC,CAAC;QACxC,IAAI,CAACjB,YAAY,CAACkB,KAAK,EAAE;MAC3B,CAAC,CAAC;;EAEN;;;uBAxBWtB,iBAAiB,EAAAuB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,kBAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;EAAA;;;YAAjB5B,iBAAiB;MAAA6B,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCT9BZ,EAAA,CAAAc,cAAA,cAAyD;UAAxBd,EAAA,CAAAe,UAAA,sBAAAC,oDAAA;YAAA,OAAYH,GAAA,CAAAvB,QAAA,EAAU;UAAA,EAAC;UAGpDU,EAAA,CAAAiB,SAAA,eAAuF;UAYvFjB,EAAA,CAAAc,cAAA,gBAA6D;UAC/Bd,EAAA,CAAAkB,MAAA,oBAAa;UAAAlB,EAAA,CAAAmB,YAAA,EAAS;UAChDnB,EAAA,CAAAc,cAAA,gBAAwB;UAAAd,EAAA,CAAAkB,MAAA,cAAO;UAAAlB,EAAA,CAAAmB,YAAA,EAAS;UACxCnB,EAAA,CAAAc,cAAA,iBAAsB;UAAAd,EAAA,CAAAkB,MAAA,aAAK;UAAAlB,EAAA,CAAAmB,YAAA,EAAS;UAGxCnB,EAAA,CAAAc,cAAA,iBAAmD;UAAAd,EAAA,CAAAkB,MAAA,gBAAQ;UAAAlB,EAAA,CAAAmB,YAAA,EAAS;;;UArBlEnB,EAAA,CAAAoB,UAAA,cAAAP,GAAA,CAAAhC,YAAA,CAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}