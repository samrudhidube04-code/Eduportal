{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nexport let EnrollCourseComponent = class EnrollCourseComponent {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:3000/users';\n  }\n  confirmEnrollment() {\n    const userJSON = localStorage.getItem('loggedInUser');\n    if (!userJSON) {\n      alert('⚠️ Please login to enroll.');\n      this.router.navigate(['/login']);\n      return;\n    }\n    const confirmEnroll = confirm(`Are you sure you want to enroll in \"${this.course.name}\"?`);\n    if (confirmEnroll) this.enrollCourse();\n  }\n  enrollCourse() {\n    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\n    this.http.get(this.apiUrl).subscribe(users => {\n      const user = users.find(u => u.email === loggedInUser.email);\n      if (!user) {\n        alert('User not found in system.');\n        return;\n      }\n      if (!user.enrolledCourses) {\n        user.enrolledCourses = [];\n      }\n      const alreadyEnrolled = user.enrolledCourses.some(c => c.id === this.course.id);\n      if (alreadyEnrolled) {\n        alert('❗ You are already enrolled in this course.');\n        return;\n      }\n      user.enrolledCourses.push(this.course);\n      this.http.patch(`${this.apiUrl}/${user.id}`, {\n        enrolledCourses: user.enrolledCourses\n      }).subscribe(updatedUser => {\n        localStorage.setItem('loggedInUser', JSON.stringify(updatedUser));\n        alert(`✅ Successfully enrolled in \"${this.course.name}\"`);\n      });\n    });\n  }\n};\n__decorate([Input()], EnrollCourseComponent.prototype, \"course\", void 0);\nEnrollCourseComponent = __decorate([Component({\n  selector: 'app-enroll-course',\n  templateUrl: './enroll-course.component.html',\n  styleUrls: ['./enroll-course.component.css']\n})], EnrollCourseComponent);","map":{"version":3,"names":["Component","Input","EnrollCourseComponent","constructor","http","router","apiUrl","confirmEnrollment","userJSON","localStorage","getItem","alert","navigate","confirmEnroll","confirm","course","name","enrollCourse","loggedInUser","JSON","parse","get","subscribe","users","user","find","u","email","enrolledCourses","alreadyEnrolled","some","c","id","push","patch","updatedUser","setItem","stringify","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\rocks\\OneDrive\\Desktop\\Angular\\AngularForm\\src\\app\\Components\\enroll\\enroll.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\ninterface Course {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  image: string;\n}\n\n@Component({\n  selector: 'app-enroll-course',\n  templateUrl: './enroll-course.component.html',\n  styleUrls: ['./enroll-course.component.css']\n})\nexport class EnrollCourseComponent {\n  @Input() course!: Course;\n  private apiUrl = 'http://localhost:3000/users';\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  confirmEnrollment() {\n    const userJSON = localStorage.getItem('loggedInUser');\n    if (!userJSON) {\n      alert('⚠️ Please login to enroll.');\n      this.router.navigate(['/login']);\n      return;\n    }\n\n    const confirmEnroll = confirm(`Are you sure you want to enroll in \"${this.course.name}\"?`);\n    if (confirmEnroll) this.enrollCourse();\n  }\n\n  enrollCourse() {\n    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser')!);\n\n    this.http.get<any[]>(this.apiUrl).subscribe(users => {\n      const user = users.find(u => u.email === loggedInUser.email);\n\n      if (!user) {\n        alert('User not found in system.');\n        return;\n      }\n\n      if (!user.enrolledCourses) {\n        user.enrolledCourses = [];\n      }\n\n      const alreadyEnrolled = user.enrolledCourses.some((c: Course) => c.id === this.course.id);\n      if (alreadyEnrolled) {\n        alert('❗ You are already enrolled in this course.');\n        return;\n      }\n\n      user.enrolledCourses.push(this.course);\n\n      this.http.patch(`${this.apiUrl}/${user.id}`, { enrolledCourses: user.enrolledCourses }).subscribe(updatedUser => {\n        localStorage.setItem('loggedInUser', JSON.stringify(updatedUser));\n        alert(`✅ Successfully enrolled in \"${this.course.name}\"`);\n      });\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAQ,eAAe;AAiBzC,WAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAIhCC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAF5C,KAAAC,MAAM,GAAG,6BAA6B;EAEkB;EAEhEC,iBAAiBA,CAAA;IACf,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACrD,IAAI,CAACF,QAAQ,EAAE;MACbG,KAAK,CAAC,4BAA4B,CAAC;MACnC,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC;;IAGF,MAAMC,aAAa,GAAGC,OAAO,CAAC,uCAAuC,IAAI,CAACC,MAAM,CAACC,IAAI,IAAI,CAAC;IAC1F,IAAIH,aAAa,EAAE,IAAI,CAACI,YAAY,EAAE;EACxC;EAEAA,YAAYA,CAAA;IACV,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACX,YAAY,CAACC,OAAO,CAAC,cAAc,CAAE,CAAC;IAEtE,IAAI,CAACN,IAAI,CAACiB,GAAG,CAAQ,IAAI,CAACf,MAAM,CAAC,CAACgB,SAAS,CAACC,KAAK,IAAG;MAClD,MAAMC,IAAI,GAAGD,KAAK,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKT,YAAY,CAACS,KAAK,CAAC;MAE5D,IAAI,CAACH,IAAI,EAAE;QACTb,KAAK,CAAC,2BAA2B,CAAC;QAClC;;MAGF,IAAI,CAACa,IAAI,CAACI,eAAe,EAAE;QACzBJ,IAAI,CAACI,eAAe,GAAG,EAAE;;MAG3B,MAAMC,eAAe,GAAGL,IAAI,CAACI,eAAe,CAACE,IAAI,CAAEC,CAAS,IAAKA,CAAC,CAACC,EAAE,KAAK,IAAI,CAACjB,MAAM,CAACiB,EAAE,CAAC;MACzF,IAAIH,eAAe,EAAE;QACnBlB,KAAK,CAAC,4CAA4C,CAAC;QACnD;;MAGFa,IAAI,CAACI,eAAe,CAACK,IAAI,CAAC,IAAI,CAAClB,MAAM,CAAC;MAEtC,IAAI,CAACX,IAAI,CAAC8B,KAAK,CAAC,GAAG,IAAI,CAAC5B,MAAM,IAAIkB,IAAI,CAACQ,EAAE,EAAE,EAAE;QAAEJ,eAAe,EAAEJ,IAAI,CAACI;MAAe,CAAE,CAAC,CAACN,SAAS,CAACa,WAAW,IAAG;QAC9G1B,YAAY,CAAC2B,OAAO,CAAC,cAAc,EAAEjB,IAAI,CAACkB,SAAS,CAACF,WAAW,CAAC,CAAC;QACjExB,KAAK,CAAC,+BAA+B,IAAI,CAACI,MAAM,CAACC,IAAI,GAAG,CAAC;MAC3D,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;CACD;AA9CUsB,UAAA,EAARrC,KAAK,EAAE,C,oDAAiB;AADdC,qBAAqB,GAAAoC,UAAA,EALjCtC,SAAS,CAAC;EACTuC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACWvC,qBAAqB,CA+CjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}