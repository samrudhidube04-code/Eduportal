{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/service/form-service.service\";\nimport * as i3 from \"@angular/router\";\nexport class RegisterComponent {\n  constructor(fb, userserv, router) {\n    this.fb = fb;\n    this.userserv = userserv;\n    this.router = router;\n    this.submitted = false;\n    this.registerForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required],\n      role: ['', Validators.required]\n    }, {\n      validators: this.passwordMatchValidator\n    });\n  }\n  // ✅ Custom validator: password must match confirmPassword\n  passwordMatchValidator(form) {\n    const pass = form.get('password')?.value;\n    const confirm = form.get('confirmPassword')?.value;\n    return pass === confirm ? null : {\n      mismatch: true\n    };\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.registerForm.invalid) {\n      return;\n    }\n    const formData = this.registerForm.value;\n    this.userserv.addUser(formData).subscribe(() => {\n      alert('✅ User registered successfully!');\n      this.registerForm.reset();\n      this.submitted = false;\n      this.router.navigate(['/login']); // Redirect to login after success\n    }, error => {\n      alert('❌ Error while registering user!');\n      console.error(error);\n    });\n  }\n  static {\n    this.ɵfac = function RegisterComponent_Factory(t) {\n      return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.FormServiceService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegisterComponent,\n      selectors: [[\"app-register\"]],\n      decls: 14,\n      vars: 1,\n      consts: [[3, \"formGroup\", \"ngSubmit\"], [\"type\", \"text\", \"formControlName\", \"name\", \"placeholder\", \"Full Name\", 1, \"form-control\"], [\"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Email\", 1, \"form-control\"], [\"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Password\", 1, \"form-control\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", \"placeholder\", \"Confirm Password\", 1, \"form-control\"], [\"id\", \"role\", \"formControlName\", \"role\", 1, \"form-select\"], [\"value\", \"\", \"disabled\", \"\"], [\"value\", \"Student\"], [\"value\", \"Admin\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-3\"]],\n      template: function RegisterComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_0_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelement(1, \"input\", 1)(2, \"input\", 2)(3, \"input\", 3)(4, \"input\", 4);\n          i0.ɵɵelementStart(5, \"select\", 5)(6, \"option\", 6);\n          i0.ɵɵtext(7, \"Select a role\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"option\", 7);\n          i0.ɵɵtext(9, \"Student\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"option\", 8);\n          i0.ɵɵtext(11, \"Admin\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(12, \"button\", 9);\n          i0.ɵɵtext(13, \"Register\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","RegisterComponent","constructor","fb","userserv","router","submitted","registerForm","group","name","required","email","password","minLength","confirmPassword","role","validators","passwordMatchValidator","form","pass","get","value","confirm","mismatch","onSubmit","invalid","formData","addUser","subscribe","alert","reset","navigate","error","console","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","FormServiceService","i3","Router","selectors","decls","vars","consts","template","RegisterComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","RegisterComponent_Template_form_ngSubmit_0_listener","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵproperty"],"sources":["C:\\Users\\rocks\\OneDrive\\Desktop\\Angular\\AngularForm\\src\\app\\Components\\register\\register.component.ts","C:\\Users\\rocks\\OneDrive\\Desktop\\Angular\\AngularForm\\src\\app\\Components\\register\\register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormServiceService } from 'src/app/service/form-service.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n\n  registerForm: FormGroup;\n  submitted = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private userserv: FormServiceService,\n    private router: Router\n  ) {\n    this.registerForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required],\n      role: ['', Validators.required]\n    }, {\n      validators: this.passwordMatchValidator\n    });\n  }\n\n  // ✅ Custom validator: password must match confirmPassword\n  passwordMatchValidator(form: FormGroup) {\n    const pass = form.get('password')?.value;\n    const confirm = form.get('confirmPassword')?.value;\n    return pass === confirm ? null : { mismatch: true };\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    const formData = this.registerForm.value;\n\n    this.userserv.addUser(formData).subscribe(() => {\n      alert('✅ User registered successfully!');\n      this.registerForm.reset();\n      this.submitted = false;\n      this.router.navigate(['/login']); // Redirect to login after success\n    }, error => {\n      alert('❌ Error while registering user!');\n      console.error(error);\n    });\n  }\n}\n","<form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n\n    <!-- Name -->\n    <input type=\"text\" class=\"form-control\" formControlName=\"name\" placeholder=\"Full Name\">\n\n    <!-- Email -->\n    <input type=\"email\" class=\"form-control\" formControlName=\"email\" placeholder=\"Email\">\n\n    <!-- Password -->\n    <input type=\"password\" class=\"form-control\" formControlName=\"password\" placeholder=\"Password\">\n\n    <!-- Confirm Password -->\n    <input type=\"password\" class=\"form-control\" formControlName=\"confirmPassword\" placeholder=\"Confirm Password\">\n\n    <!-- Role -->\n    <select id=\"role\" class=\"form-select\" formControlName=\"role\">\n        <option value=\"\" disabled>Select a role</option>\n        <option value=\"Student\">Student</option>\n        <option value=\"Admin\">Admin</option>\n    </select>\n\n    <button type=\"submit\" class=\"btn btn-primary mt-3\">Register</button>\n\n</form>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}