{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let LoginComponent = class LoginComponent {\n  constructor(fb, router) {\n    this.fb = fb;\n    this.router = router;\n    this.submitted = false;\n    this.loginError = '';\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.loginForm.invalid) return;\n    const {\n      email,\n      password\n    } = this.loginForm.value;\n    if (email === 'admin@example.com' && password === 'admin123') {\n      this.router.navigate(['/admin']);\n    } else if (email === 'user@example.com' && password === 'user123') {\n      this.router.navigate(['/user']);\n    } else {\n      this.loginError = 'Invalid credentials!';\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","Validators","LoginComponent","constructor","fb","router","submitted","loginError","loginForm","group","email","required","password","onSubmit","invalid","value","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\rocks\\OneDrive\\Desktop\\Angular\\AngularForm\\src\\app\\Components\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n  loginForm: FormGroup;\n  submitted = false;\n  loginError = '';\n\n  constructor(private fb: FormBuilder, private router: Router) {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n    });\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.loginForm.invalid) return;\n\n    const { email, password } = this.loginForm.value;\n\n    if (email === 'admin@example.com' && password === 'admin123') {\n      this.router.navigate(['/admin']);\n    } else if (email === 'user@example.com' && password === 'user123') {\n      this.router.navigate(['/user']);\n    } else {\n      this.loginError = 'Invalid credentials!';\n    }\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAQ5D,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAMzBC,YAAoBC,EAAe,EAAUC,MAAc;IAAvC,KAAAD,EAAE,GAAFA,EAAE;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAHnD,KAAAC,SAAS,GAAG,KAAK;IACjB,KAAAC,UAAU,GAAG,EAAE;IAGb,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MAC7BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACT,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACS,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ;KACnC,CAAC;EACJ;EACAE,QAAQA,CAAA;IACN,IAAI,CAACP,SAAS,GAAG,IAAI;IACrB,IAAI,IAAI,CAACE,SAAS,CAACM,OAAO,EAAE;IAE5B,MAAM;MAAEJ,KAAK;MAAEE;IAAQ,CAAE,GAAG,IAAI,CAACJ,SAAS,CAACO,KAAK;IAEhD,IAAIL,KAAK,KAAK,mBAAmB,IAAIE,QAAQ,KAAK,UAAU,EAAE;MAC5D,IAAI,CAACP,MAAM,CAACW,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;KACjC,MAAM,IAAIN,KAAK,KAAK,kBAAkB,IAAIE,QAAQ,KAAK,SAAS,EAAE;MACjE,IAAI,CAACP,MAAM,CAACW,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;KAChC,MAAM;MACL,IAAI,CAACT,UAAU,GAAG,sBAAsB;;EAE5C;CACD;AA1BYL,cAAc,GAAAe,UAAA,EAL1BjB,SAAS,CAAC;EACTkB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWlB,cAAc,CA0B1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}