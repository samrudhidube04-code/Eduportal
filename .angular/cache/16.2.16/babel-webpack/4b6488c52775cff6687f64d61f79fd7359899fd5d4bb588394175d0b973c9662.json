{"ast":null,"code":"// import { Component } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { Router } from '@angular/router';\n// import { FormServiceService } from 'src/app/service/form-service.service';\n// import { User } from '../Interface/interface';\n// import { HttpClient } from '@angular/common/http';\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.css']\n// })\n// export class LoginComponent {\n//   loginForm: FormGroup;\n//   submitted = false;\n//   loginError = '';\n//   constructor(private fb: FormBuilder, private router: Router, private userserve: FormServiceService, private http: HttpClient) {\n//     this.loginForm = this.fb.group({\n//       email: ['', [Validators.required, Validators.email]],\n//       password: ['', Validators.required],\n//     });\n//   }\n//   onSubmit() {\n//     const { email, password } = this.loginForm.value;\n//     // 🔐 Check static admin login\n//     if (this.userserve.isAdmin(email, password)) {\n//       alert('Welcome Admin!');\n//       this.router.navigate(['/admin']);\n//       return;\n//     }\n//     // 👤 Check dynamic users from JSON\n//     this.userserve.loginUser(email, password).subscribe(users => {\n//       if (users.length > 0) {\n//         alert('Welcome User!');\n//         this.router.navigate(['/user']);\n//       } else {\n//         alert('Invalid credentials');\n//       }\n//     });\n//   }\n// }\nexport class LoginComponent {\n  constructor(fb, router, userService) {\n    this.fb = fb;\n    this.router = router;\n    this.userService = userService;\n    this.submitted = false; // ✅ Now exists\n    this.loginError = ''; // ✅ Now exists\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n    const {\n      email,\n      password\n    } = this.loginForm.value;\n    if (this.userService.isAdmin(email, password)) {\n      localStorage.setItem('isLoggedIn', 'true');\n      localStorage.setItem('role', 'admin');\n      this.router.navigate(['/admin']);\n      return;\n    }\n    this.userService.loginUser(email, password).subscribe(users => {\n      if (users.length > 0) {\n        const user = users[0];\n        const loginUser = {\n          name: user.name,\n          email: user.email,\n          role: user.role || 'user',\n          loginTime: new Date()\n        };\n        localStorage.setItem('isLoggedIn', 'true');\n        localStorage.setItem('role', loginUser.role);\n        localStorage.setItem('loggedInUser', JSON.stringify(loginUser));\n        this.router.navigate(['/user']);\n      } else {\n        this.loginError = 'Invalid email or password';\n      }\n    });\n  }\n}","map":{"version":3,"names":["LoginComponent","constructor","fb","router","userService","submitted","loginError","loginForm","group","email","Validators","required","password","onSubmit","invalid","value","isAdmin","localStorage","setItem","navigate","loginUser","subscribe","users","length","user","name","role","loginTime","Date","JSON","stringify"],"sources":["C:\\Users\\rocks\\OneDrive\\Desktop\\Angular\\AngularForm\\src\\app\\Components\\login\\login.component.ts"],"sourcesContent":["// import { Component } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { Router } from '@angular/router';\n// import { FormServiceService } from 'src/app/service/form-service.service';\n// import { User } from '../Interface/interface';\n// import { HttpClient } from '@angular/common/http';\n\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.css']\n// })\n// export class LoginComponent {\n\n//   loginForm: FormGroup;\n//   submitted = false;\n//   loginError = '';\n\n//   constructor(private fb: FormBuilder, private router: Router, private userserve: FormServiceService, private http: HttpClient) {\n//     this.loginForm = this.fb.group({\n//       email: ['', [Validators.required, Validators.email]],\n//       password: ['', Validators.required],\n//     });\n//   }\n//   onSubmit() {\n//     const { email, password } = this.loginForm.value;\n\n//     // 🔐 Check static admin login\n//     if (this.userserve.isAdmin(email, password)) {\n//       alert('Welcome Admin!');\n//       this.router.navigate(['/admin']);\n//       return;\n//     }\n\n//     // 👤 Check dynamic users from JSON\n//     this.userserve.loginUser(email, password).subscribe(users => {\n//       if (users.length > 0) {\n//         alert('Welcome User!');\n//         this.router.navigate(['/user']);\n//       } else {\n//         alert('Invalid credentials');\n//       }\n//     });\n//   }\n// }\n\n\nexport class LoginComponent {\n  loginForm: FormGroup;\n  submitted = false;           // ✅ Now exists\n  loginError = '';             // ✅ Now exists\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private userService: FormServiceService\n  ) {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    const { email, password } = this.loginForm.value;\n\n    if (this.userService.isAdmin(email, password)) {\n      localStorage.setItem('isLoggedIn', 'true');\n      localStorage.setItem('role', 'admin');\n      this.router.navigate(['/admin']);\n      return;\n    }\n\n    this.userService.loginUser(email, password).subscribe(users => {\n      if (users.length > 0) {\n        const user = users[0];\n        const loginUser = {\n          name: user.name,\n          email: user.email,\n          role: user.role || 'user',\n          loginTime: new Date()\n        };\n\n        localStorage.setItem('isLoggedIn', 'true');\n        localStorage.setItem('role', loginUser.role);\n        localStorage.setItem('loggedInUser', JSON.stringify(loginUser));\n\n        this.router.navigate(['/user']);\n      } else {\n        this.loginError = 'Invalid email or password';\n      }\n    });\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAM,MAAOA,cAAc;EAKzBC,YACUC,EAAe,EACfC,MAAc,EACdC,WAA+B;IAF/B,KAAAF,EAAE,GAAFA,EAAE;IACF,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IANrB,KAAAC,SAAS,GAAG,KAAK,CAAC,CAAW;IAC7B,KAAAC,UAAU,GAAG,EAAE,CAAC,CAAa;IAO3B,IAAI,CAACC,SAAS,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAC7BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACC,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACD,KAAK,CAAC,CAAC;MACpDG,QAAQ,EAAE,CAAC,EAAE,EAAEF,UAAU,CAACC,QAAQ;KACnC,CAAC;EACJ;EAEAE,QAAQA,CAAA;IACN,IAAI,CAACR,SAAS,GAAG,IAAI;IAErB,IAAI,IAAI,CAACE,SAAS,CAACO,OAAO,EAAE;MAC1B;;IAGF,MAAM;MAAEL,KAAK;MAAEG;IAAQ,CAAE,GAAG,IAAI,CAACL,SAAS,CAACQ,KAAK;IAEhD,IAAI,IAAI,CAACX,WAAW,CAACY,OAAO,CAACP,KAAK,EAAEG,QAAQ,CAAC,EAAE;MAC7CK,YAAY,CAACC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;MAC1CD,YAAY,CAACC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC;MACrC,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC;;IAGF,IAAI,CAACf,WAAW,CAACgB,SAAS,CAACX,KAAK,EAAEG,QAAQ,CAAC,CAACS,SAAS,CAACC,KAAK,IAAG;MAC5D,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;QACpB,MAAMC,IAAI,GAAGF,KAAK,CAAC,CAAC,CAAC;QACrB,MAAMF,SAAS,GAAG;UAChBK,IAAI,EAAED,IAAI,CAACC,IAAI;UACfhB,KAAK,EAAEe,IAAI,CAACf,KAAK;UACjBiB,IAAI,EAAEF,IAAI,CAACE,IAAI,IAAI,MAAM;UACzBC,SAAS,EAAE,IAAIC,IAAI;SACpB;QAEDX,YAAY,CAACC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;QAC1CD,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEE,SAAS,CAACM,IAAI,CAAC;QAC5CT,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEW,IAAI,CAACC,SAAS,CAACV,SAAS,CAAC,CAAC;QAE/D,IAAI,CAACjB,MAAM,CAACgB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;OAChC,MAAM;QACL,IAAI,CAACb,UAAU,GAAG,2BAA2B;;IAEjD,CAAC,CAAC;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}