{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nexport let EnrollCourseComponent = class EnrollCourseComponent {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:3000/users';\n  }\n  enrollCourse() {\n    const loggedInUserJSON = localStorage.getItem('loggedInUser');\n    if (!loggedInUserJSON) {\n      alert('Please log in first.');\n      this.router.navigate(['/login']);\n      return;\n    }\n    const loggedInUser = JSON.parse(loggedInUserJSON);\n    // Step 1: Get all users\n    this.http.get(this.apiUrl).subscribe(users => {\n      const user = users.find(u => u.email === loggedInUser.email);\n      if (!user) {\n        alert('User not found in system.');\n        return;\n      }\n      if (!user.enrolledCourses) {\n        user.enrolledCourses = [];\n      }\n      const alreadyEnrolled = user.enrolledCourses.some(c => c.id === this.course.id);\n      if (alreadyEnrolled) {\n        alert('Already enrolled in this course.');\n        return;\n      }\n      // Step 2: Add course\n      user.enrolledCourses.push(this.course);\n      // Step 3: PATCH request to update user\n      this.http.patch(`${this.apiUrl}/${user.id}`, {\n        enrolledCourses: user.enrolledCourses\n      }).subscribe(updatedUser => {\n        // Step 4: Update localStorage\n        localStorage.setItem('loggedInUser', JSON.stringify(updatedUser));\n        alert(`Successfully enrolled in \"${this.course.name}\"`);\n      });\n    });\n  }\n};\n__decorate([Input()], EnrollCourseComponent.prototype, \"course\", void 0);\nEnrollCourseComponent = __decorate([Component({\n  selector: 'app-enroll-course',\n  templateUrl: './enroll-course.component.html',\n  styleUrls: ['./enroll-course.component.css']\n})], EnrollCourseComponent);","map":{"version":3,"names":["Component","Input","EnrollCourseComponent","constructor","http","router","apiUrl","enrollCourse","loggedInUserJSON","localStorage","getItem","alert","navigate","loggedInUser","JSON","parse","get","subscribe","users","user","find","u","email","enrolledCourses","alreadyEnrolled","some","c","id","course","push","patch","updatedUser","setItem","stringify","name","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\rocks\\OneDrive\\Desktop\\Angular\\AngularForm\\src\\app\\Components\\explore-courses\\explore-courses.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\ninterface Course {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  image: string;\n}\n\n@Component({\n  selector: 'app-enroll-course',\n  templateUrl: './enroll-course.component.html',\n  styleUrls: ['./enroll-course.component.css']\n})\nexport class EnrollCourseComponent {\n  @Input() course!: Course;\n  private apiUrl = 'http://localhost:3000/users';\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  enrollCourse() {\n    const loggedInUserJSON = localStorage.getItem('loggedInUser');\n    if (!loggedInUserJSON) {\n      alert('Please log in first.');\n      this.router.navigate(['/login']);\n      return;\n    }\n\n    const loggedInUser = JSON.parse(loggedInUserJSON);\n\n    // Step 1: Get all users\n    this.http.get<any[]>(this.apiUrl).subscribe(users => {\n      const user = users.find(u => u.email === loggedInUser.email);\n      if (!user) {\n        alert('User not found in system.');\n        return;\n      }\n\n      if (!user.enrolledCourses) {\n        user.enrolledCourses = [];\n      }\n\n      const alreadyEnrolled = user.enrolledCourses.some((c: Course) => c.id === this.course.id);\n      if (alreadyEnrolled) {\n        alert('Already enrolled in this course.');\n        return;\n      }\n\n      // Step 2: Add course\n      user.enrolledCourses.push(this.course);\n\n      // Step 3: PATCH request to update user\n      this.http.patch(`${this.apiUrl}/${user.id}`, { enrolledCourses: user.enrolledCourses })\n        .subscribe(updatedUser => {\n          // Step 4: Update localStorage\n          localStorage.setItem('loggedInUser', JSON.stringify(updatedUser));\n          alert(`Successfully enrolled in \"${this.course.name}\"`);\n        });\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAQ,eAAe;AAiBzC,WAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAIhCC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAF5C,KAAAC,MAAM,GAAG,6BAA6B;EAEkB;EAEhEC,YAAYA,CAAA;IACV,MAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAC7D,IAAI,CAACF,gBAAgB,EAAE;MACrBG,KAAK,CAAC,sBAAsB,CAAC;MAC7B,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC;;IAGF,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACP,gBAAgB,CAAC;IAEjD;IACA,IAAI,CAACJ,IAAI,CAACY,GAAG,CAAQ,IAAI,CAACV,MAAM,CAAC,CAACW,SAAS,CAACC,KAAK,IAAG;MAClD,MAAMC,IAAI,GAAGD,KAAK,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKT,YAAY,CAACS,KAAK,CAAC;MAC5D,IAAI,CAACH,IAAI,EAAE;QACTR,KAAK,CAAC,2BAA2B,CAAC;QAClC;;MAGF,IAAI,CAACQ,IAAI,CAACI,eAAe,EAAE;QACzBJ,IAAI,CAACI,eAAe,GAAG,EAAE;;MAG3B,MAAMC,eAAe,GAAGL,IAAI,CAACI,eAAe,CAACE,IAAI,CAAEC,CAAS,IAAKA,CAAC,CAACC,EAAE,KAAK,IAAI,CAACC,MAAM,CAACD,EAAE,CAAC;MACzF,IAAIH,eAAe,EAAE;QACnBb,KAAK,CAAC,kCAAkC,CAAC;QACzC;;MAGF;MACAQ,IAAI,CAACI,eAAe,CAACM,IAAI,CAAC,IAAI,CAACD,MAAM,CAAC;MAEtC;MACA,IAAI,CAACxB,IAAI,CAAC0B,KAAK,CAAC,GAAG,IAAI,CAACxB,MAAM,IAAIa,IAAI,CAACQ,EAAE,EAAE,EAAE;QAAEJ,eAAe,EAAEJ,IAAI,CAACI;MAAe,CAAE,CAAC,CACpFN,SAAS,CAACc,WAAW,IAAG;QACvB;QACAtB,YAAY,CAACuB,OAAO,CAAC,cAAc,EAAElB,IAAI,CAACmB,SAAS,CAACF,WAAW,CAAC,CAAC;QACjEpB,KAAK,CAAC,6BAA6B,IAAI,CAACiB,MAAM,CAACM,IAAI,GAAG,CAAC;MACzD,CAAC,CAAC;IACN,CAAC,CAAC;EACJ;CACD;AA7CUC,UAAA,EAARlC,KAAK,EAAE,C,oDAAiB;AADdC,qBAAqB,GAAAiC,UAAA,EALjCnC,SAAS,CAAC;EACToC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACWpC,qBAAqB,CA8CjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}