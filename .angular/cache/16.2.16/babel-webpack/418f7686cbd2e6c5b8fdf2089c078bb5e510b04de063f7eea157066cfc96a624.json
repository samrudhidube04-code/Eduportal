{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FormServiceService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/users';\n    // ✅ Static Admin Credentials\n    this.admin = {\n      email: 'admin@gmail.com',\n      password: 'admin123',\n      role: 'admin'\n    };\n  }\n  // ✅ Register New User\n  addUser(user) {\n    return this.http.post(this.apiUrl, user);\n  }\n  // ✅ Admin Login Checker\n  isAdmin(email, password) {\n    return email === this.admin.email && password === this.admin.password;\n  }\n  // ✅ Dynamic User Login (returns matched user(s))\n  loginUser(email, password) {\n    return this.http.get(`${this.apiUrl}?email=${email}&password=${password}`);\n  }\n  // ✅ Get All Users\n  getLoggedUsers() {\n    return this.http.get(this.apiUrl);\n  }\n  // ✅ Update Login Time (optional)\n  updateLoginTime(userId, loginTime) {\n    return this.http.patch(`${this.apiUrl}/${userId}`, {\n      loginTime\n    });\n  }\n  static {\n    this.ɵfac = function FormServiceService_Factory(t) {\n      return new (t || FormServiceService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FormServiceService,\n      factory: FormServiceService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["FormServiceService","constructor","http","apiUrl","admin","email","password","role","addUser","user","post","isAdmin","loginUser","get","getLoggedUsers","updateLoginTime","userId","loginTime","patch","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\rocks\\OneDrive\\Desktop\\Angular\\AngularForm\\src\\app\\service\\form-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormServiceService {\n\n  private apiUrl = 'http://localhost:3000/users';\n\n  // ✅ Static Admin Credentials\n  private admin = {\n    email: 'admin@gmail.com',\n    password: 'admin123',\n    role: 'admin'\n  };\n\n  constructor(private http: HttpClient) { }\n\n  // ✅ Register New User\n  addUser(user: any): Observable<any> {\n    return this.http.post(this.apiUrl, user);\n  }\n\n  // ✅ Admin Login Checker\n  isAdmin(email: string, password: string): boolean {\n    return email === this.admin.email && password === this.admin.password;\n  }\n\n  // ✅ Dynamic User Login (returns matched user(s))\n  loginUser(email: string, password: string): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}?email=${email}&password=${password}`);\n  }\n\n  // ✅ Get All Users\n  getLoggedUsers(): Observable<any[]> {\n    return this.http.get<any[]>(this.apiUrl);\n  }\n\n  // ✅ Update Login Time (optional)\n  updateLoginTime(userId: number, loginTime: string): Observable<any> {\n    return this.http.patch(`${this.apiUrl}/${userId}`, { loginTime });\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,kBAAkB;EAW7BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAThB,KAAAC,MAAM,GAAG,6BAA6B;IAE9C;IACQ,KAAAC,KAAK,GAAG;MACdC,KAAK,EAAE,iBAAiB;MACxBC,QAAQ,EAAE,UAAU;MACpBC,IAAI,EAAE;KACP;EAEuC;EAExC;EACAC,OAAOA,CAACC,IAAS;IACf,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACP,MAAM,EAAEM,IAAI,CAAC;EAC1C;EAEA;EACAE,OAAOA,CAACN,KAAa,EAAEC,QAAgB;IACrC,OAAOD,KAAK,KAAK,IAAI,CAACD,KAAK,CAACC,KAAK,IAAIC,QAAQ,KAAK,IAAI,CAACF,KAAK,CAACE,QAAQ;EACvE;EAEA;EACAM,SAASA,CAACP,KAAa,EAAEC,QAAgB;IACvC,OAAO,IAAI,CAACJ,IAAI,CAACW,GAAG,CAAQ,GAAG,IAAI,CAACV,MAAM,UAAUE,KAAK,aAAaC,QAAQ,EAAE,CAAC;EACnF;EAEA;EACAQ,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACZ,IAAI,CAACW,GAAG,CAAQ,IAAI,CAACV,MAAM,CAAC;EAC1C;EAEA;EACAY,eAAeA,CAACC,MAAc,EAAEC,SAAiB;IAC/C,OAAO,IAAI,CAACf,IAAI,CAACgB,KAAK,CAAC,GAAG,IAAI,CAACf,MAAM,IAAIa,MAAM,EAAE,EAAE;MAAEC;IAAS,CAAE,CAAC;EACnE;;;uBApCWjB,kBAAkB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAlBtB,kBAAkB;MAAAuB,OAAA,EAAlBvB,kBAAkB,CAAAwB,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}