{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(fb, userserv, router) {\n    this.fb = fb;\n    this.userserv = userserv;\n    this.router = router;\n    this.submitted = false;\n    this.registerForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required],\n      role: ['', Validators.required]\n    }, {\n      validators: this.passwordMatchValidator\n    });\n  }\n  // ✅ Custom validator for matching passwords\n  passwordMatchValidator(form) {\n    const pass = form.get('password')?.value;\n    const confirm = form.get('confirmPassword')?.value;\n    return pass === confirm ? null : {\n      mismatch: true\n    };\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.registerForm.invalid) {\n      return;\n    }\n    const userData = this.registerForm.value;\n    this.userserv.addUser(userData).subscribe(() => {\n      alert('✅ User registered successfully!');\n      this.registerForm.reset();\n      this.submitted = false;\n      this.router.navigate(['/login']); // optional redirect\n    });\n  }\n};\n\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);","map":{"version":3,"names":["Component","Validators","RegisterComponent","constructor","fb","userserv","router","submitted","registerForm","group","name","required","email","password","minLength","confirmPassword","role","validators","passwordMatchValidator","form","pass","get","value","confirm","mismatch","onSubmit","invalid","userData","addUser","subscribe","alert","reset","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\rocks\\OneDrive\\Desktop\\Angular\\AngularForm\\src\\app\\Components\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormServiceService } from 'src/app/service/form-service.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n\n  registerForm: FormGroup;\n  submitted = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private userserv: FormServiceService,\n    private router: Router\n  ) {\n    this.registerForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required],\n      role: ['', Validators.required]\n    }, {\n      validators: this.passwordMatchValidator\n    });\n  }\n\n  // ✅ Custom validator for matching passwords\n  passwordMatchValidator(form: FormGroup) {\n    const pass = form.get('password')?.value;\n    const confirm = form.get('confirmPassword')?.value;\n    return pass === confirm ? null : { mismatch: true };\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    const userData = this.registerForm.value;\n\n    this.userserv.addUser(userData).subscribe(() => {\n      alert('✅ User registered successfully!');\n      this.registerForm.reset();\n      this.submitted = false;\n      this.router.navigate(['/login']); // optional redirect\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAS5D,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAK5BC,YACUC,EAAe,EACfC,QAA4B,EAC5BC,MAAc;IAFd,KAAAF,EAAE,GAAFA,EAAE;IACF,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAAC,MAAM,GAANA,MAAM;IALhB,KAAAC,SAAS,GAAG,KAAK;IAOf,IAAI,CAACC,YAAY,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MAChCC,IAAI,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MAC/BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACW,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DC,eAAe,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACU,QAAQ,CAAC;MAC1CK,IAAI,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACU,QAAQ;KAC/B,EAAE;MACDM,UAAU,EAAE,IAAI,CAACC;KAClB,CAAC;EACJ;EAEA;EACAA,sBAAsBA,CAACC,IAAe;IACpC,MAAMC,IAAI,GAAGD,IAAI,CAACE,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;IACxC,MAAMC,OAAO,GAAGJ,IAAI,CAACE,GAAG,CAAC,iBAAiB,CAAC,EAAEC,KAAK;IAClD,OAAOF,IAAI,KAAKG,OAAO,GAAG,IAAI,GAAG;MAAEC,QAAQ,EAAE;IAAI,CAAE;EACrD;EAEAC,QAAQA,CAAA;IACN,IAAI,CAAClB,SAAS,GAAG,IAAI;IAErB,IAAI,IAAI,CAACC,YAAY,CAACkB,OAAO,EAAE;MAC7B;;IAGF,MAAMC,QAAQ,GAAG,IAAI,CAACnB,YAAY,CAACc,KAAK;IAExC,IAAI,CAACjB,QAAQ,CAACuB,OAAO,CAACD,QAAQ,CAAC,CAACE,SAAS,CAAC,MAAK;MAC7CC,KAAK,CAAC,iCAAiC,CAAC;MACxC,IAAI,CAACtB,YAAY,CAACuB,KAAK,EAAE;MACzB,IAAI,CAACxB,SAAS,GAAG,KAAK;MACtB,IAAI,CAACD,MAAM,CAAC0B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC;EACJ;CACD;;AA5CY9B,iBAAiB,GAAA+B,UAAA,EAL7BjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACWlC,iBAAiB,CA4C7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}